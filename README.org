#+EXPORT_FILE_NAME: README
#+EXPORT_LANGUAGE: fr
#+OPTIONS: H:6 \n:nil toc:3 creator:nil date:nil author:t num:nil broken-links:t ^:{}
# Use pandoc pour convertir en .md

* Projet Blockchain (en python) 
Ce repertoire contient du code pour créer sa blockchain. Il a un objectif pédagogique et il est donc très commenté.  Il s'inspire d'un  [[https://developer.ibm.com/technologies/blockchain/tutorials/develop-a-blockchain-application-from-scratch-in-python/][tutoriel d'IBM]]  en anglais, dont le code est aussi sur [[https://github.com/satwikkansal/python_blockchain_app/tree/master][ce répertoire git]].

Le code crée une application web avec le framework python [[https://palletsprojects.com/p/flask/][Flask]] pour écrire, lire et partager des données sur une blockchain.  Il s'agit d'un serveur et un client blockchain.

Il n'y a pas de meilleure manière d'apprendre ce qu'est la blockchain que d'en construire une.

Le code peut être copié et testé localement, puis sur différentes machines distantes à l'aide d'un service comme [[https://ngrok.com][ngrok]]  qui permet de rendre une adresse réseau locale visible depuis sur internet.


** Pré-requis 
Assurez-vous d'avoir une version récente de python (par exemple 3.8) et que virtualenv est installé.
Executant dans un terminal.
#+BEGIN_SRC bash  -i
$ python --vesrion
Python 3.8.2

$ virtualenv --version
virtualenv 20.0.23 from ...
#+END_SRC

/Notez que je distingue ici l'invite de commande Linux et windows et les commentaires avec respectivement '$',  '>' et '#'.  Si rien n'est spécifié c'est probablement exactement les même commandes ou alors c'est qu'il s'agit du retour d'une commande./
 
*** Créer un environnement virtuel (et l'activer)
Linux
#+BEGIN_SRC bash  -i
$ virtualenv <VosInitiales>Envs
$ cd <VosInitiales>Envs
$ source bin/activate
#+END_SRC
Windows
#+BEGIN_SRC bash  -i
> virtualenv <VosInitiales>Envs
> cd <VosInitiales>Envs
> Scripts\activate
#+END_SRC

Par la suite exécuter /deactivate/ pour désactiver votre environnement virtuel.


*** Télécharger le code
    Assurez-vous d'avoir [[https://git-scm.com/download/win][git]] installé 
#+BEGIN_SRC bash  -i
$ git --version
git version 2.17.1
#+END_SRC
puis exécutez
#+BEGIN_SRC bash  -i
$ git clone https://github.com/maliky/blockchain.git
$ cd blockchain  # ou pour windows, dir blockchain
#+END_SRC

Vous pourez ensuite mettre à jour le code simplement avec
#+BEGIN_SRC bash  -i
$ git pull 
# ou, $ git pull origin master
#+END_SRC

Installer les bibliothèques nécessaires
#+BEGIN_SRC bash  -i
$ pip install -r requirements.txt
#+END_SRC

Vous êtes prêt à lancer le programme

** Lancement
*** Variable d'environements
N'oubliez pas cette étape.  Elle est importante et doit être effectué à chaque démarrage de votre machine.

Pour Linux
#+BEGIN_SRC bash  -i
$ export FLASK_APP=noeud_serveur
#+END_SRC

Pour Windows (cmd.exe) faire
#+BEGIN_SRC bash  -i
> set FLASK_APP=noeud_serveur
#+END_SRC

pour Windows Powerhsell voir [[https://flask.palletsprojects.com/en/1.1.x/cli/#application-discovery][la doc du projet Flask]].

*** En local
**** Lancer le serveur
#+BEGIN_SRC bash  -i
flask run --port 8000
#+END_SRC
Le noeud serveur est maintenant accessible en local à l'adresse par défaut http://127.0.0.1:8000, mais vous avez besoin d'un client pour interagir avec depuis le navigateur.

Lors des tests à distance, (c'est-à-dire après avoir installé ngrok), vous devrez changer cette adresse en modifiant la variable ADRESSE_NOEUD_SERVEUR dans [[file:app/client.py]]

**** Lancer le client

Ouvrez *un autre terminal* puis aller dans le dossier '<VosInitiales>Envs'
activez l'environnement virtuel

#+BEGIN_SRC bash  -i
> cd \votre\chemin\pour\<VosInitiales>Envs
> Scripts\activate
#+END_SRC

aller dans le dossier blockchain

#+BEGIN_SRC bash  -i
> cd blockchain
#+END_SRC

puis lancer l'application cliente avec

#+BEGIN_SRC bash  -i
> python lance_client.py
#+END_SRC

L'interface est accessible a [[http://localhost:5000][http://localhost:5000]].

*** Avec un adresse accessible depuis l'internet

**** Créer un accès (temporaire) à notre serveur local depuis internet
S'inscrire sur [[https://ngrok.com][ngrok.com]] et suivre les instructions du site


**** Utiliser l'interface pour ajouter d'autre noeud serveur

**** Utiliser curl pour ajouter les autres noeuds serveur          :noexport:
#+BEGIN_SRC bash  -i
curl -X POST \
  <address.ngrok.de.votre.partenair>/senregistrer_aupres \
  -H 'Content-Type: application/json' \
  -d '{"adresse": "http://votre.adresse.ngrok ou http://127.0.0.1:8000"}'
#+END_SRC

** Exercices                                                       :noexport:
Décommenter les codes dans client.py et essayer d'ajouter une interface pour s'enregistrer aurpès des autres noeuds.
via l'interface cliente

** template                                                        :noexport:
   https://jinja.palletsprojects.com/en/2.11.x/templates/#list-of-control-structures
